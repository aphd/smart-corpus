{"version":3,"sources":["services/handle-contracts.js","components/contract-finder.js","fixtures/metrics.js","components/contract-item.js","components/contract-header.js","components/contract-list.js","services/handle-download.js","components/cart.js","App.js","serviceWorker.js","index.js"],"names":["addToCart","event","address","checked","target","cart","this","state","setState","filter","v","handleContracts","query","Object","assign","total_lines","options","greater_than","functions","modifiers","payable","version","loading","fetch","then","res","json","data","vrsion","match","total","length","catch","err","console","log","pragma_versions","Any","ContractFinder","props","initialValues","Type","CV","onSubmit","values","errors","isSubmitting","name","as","TextField","select","label","SelectProps","native","entries","map","key","k","type","className","disabled","metrics","contractAddress","comments","mapping","events","addresses","ContractItem","getTD","i","addr","text","slice","parse","id","indexOf","onClick","e","keys","ContractHeader","getTh","ContractList","renderRow","downloadFile","getSourceCodeUrl","resp","handleClick","bind","sourceCode","result","SourceCode","blob","Blob","a","document","createElement","href","window","URL","createObjectURL","download","body","appendChild","click","remove","Cart","hide","no_hide","forEach","App","render","Fragment","handleContract","handleCart","Component","Boolean","location","hostname","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3667ab69.chunk.js","sourcesContent":["export const addToCart = function (event, address) {\n    const checked = !event.target.checked;\n    const cart = this.state.cart;\n\n    this.setState({\n        cart: checked ? cart.filter((v) => v !== address) : [...cart, address],\n    });\n};\n\nexport const handleContracts = function (query) {\n    // TODO to improve code readability/reusability\n    // this.query[\"total_lines\"] should be based on check type\n    // TODO you need to get the data from the mongodb.\n    this.query = Object.assign({}, query);\n    let metricsUrl =\n        \"https://raw.githubusercontent.com/aphd/smac-corpus-api/master/data/metrics.json\";\n    // metricsUrl = \"./metrics.json\";\n    const total_lines = options.greater_than[query[\"total_lines\"]] || 0;\n    const functions = options.greater_than[query[\"functions\"]] || 0;\n    const modifiers = options.greater_than[query[\"modifiers\"]] || 0;\n    const payable = options.greater_than[query[\"payable\"]] || 0;\n    const version = query[\"vrsion\"] === \"Any\" ? \".\" : query[\"vrsion\"] || \".\";\n    this.setState({ loading: true });\n    return fetch(metricsUrl)\n        .then((res) => res.json())\n        .then((data) => {\n            this.setState({\n                data: data.filter(\n                    (v) =>\n                        v.total_lines >= total_lines &&\n                        v.functions >= functions &&\n                        v.modifiers >= modifiers &&\n                        v.payable >= payable &&\n                        v.vrsion.match(version)\n                ),\n                loading: false,\n                total: data.length,\n                cart: [],\n            });\n        })\n        .catch((err) => console.log(\"catch:\\n\", err));\n};\n\nexport const options = {\n    pragma_versions: [\"Any\", \"0.4.*\", \"0.5.*\", \"0.6.*\"],\n    greater_than: {\n        Any: 0,\n        \"Greater than 1\": 1,\n        \"Greater than 10\": 10,\n        \"Greater than 100\": 100, //,\n        // \"Greater than 1000\": { $gt: 1000 }\n    },\n};\n","import React from \"react\";\nimport { Formik, Field, Form } from \"formik\";\nimport { TextField } from \"@material-ui/core\";\nimport { options } from \"../services/handle-contracts\";\n\nexport const ContractFinder = (props) => {\n    return (\n        <Formik\n            initialValues={{ Type: \"Any\", CV: \"Any\" }}\n            onSubmit={(data) => props.onSubmit(data)}\n        >\n            {({ values, errors, isSubmitting }) => (\n                <Form>\n                    {/* TODO add a factory method */}\n                    <Field\n                        name=\"vrsion\"\n                        as={TextField}\n                        select\n                        label=\"pragma version\"\n                        SelectProps={{\n                            native: true,\n                        }}\n                    >\n                        {Object.entries(options.pragma_versions).map((v) => (\n                            <option key={v[1]}>{v[1]}</option>\n                        ))}\n                    </Field>\n                    <Field\n                        name=\"total_lines\"\n                        as={TextField}\n                        select\n                        label=\"Source lines of code\"\n                        SelectProps={{\n                            native: true,\n                        }}\n                    >\n                        {Object.entries(options.greater_than).map((k, v) => (\n                            <option key={v}>{k[0]}</option>\n                        ))}\n                    </Field>\n                    <Field\n                        name=\"functions\"\n                        as={TextField}\n                        select\n                        label=\"Number of functions\"\n                        SelectProps={{\n                            native: true,\n                        }}\n                    >\n                        {Object.entries(options.greater_than).map((k, v) => (\n                            <option key={v}>{k[0]}</option>\n                        ))}\n                    </Field>\n                    <Field\n                        name=\"modifiers\"\n                        as={TextField}\n                        select\n                        label=\"Number of modifiers\"\n                        SelectProps={{\n                            native: true,\n                        }}\n                    >\n                        {Object.entries(options.greater_than).map((k, v) => (\n                            <option key={v}>{k[0]}</option>\n                        ))}\n                    </Field>\n                    <Field\n                        name=\"payable\"\n                        as={TextField}\n                        select\n                        label=\"Number of payable\"\n                        SelectProps={{\n                            native: true,\n                        }}\n                    >\n                        {Object.entries(options.greater_than).map((k, v) => (\n                            <option key={v}>{k[0]}</option>\n                        ))}\n                    </Field>\n                    <button\n                        type=\"submit\"\n                        className={`btn btn-primary`}\n                        disabled={props.loading}\n                    >\n                        <span\n                            className={`spinner-border spinner-border-sm ${\n                                props.loading ? \"mr-2\" : \"d-none\"\n                            }`}\n                        ></span>\n                        Submit\n                    </button>\n                </Form>\n            )}\n        </Formik>\n    );\n};\n","export const metrics = {\n    contractAddress: \"Address\",\n    vrsion: \"Version\",\n    total_lines: \"Total lines\",\n    comments: \"Comments\",\n    mapping: \"Mapping\",\n    functions: \"Functions\",\n    payable: \"Payable\",\n    events: \"Events\",\n    modifiers: \"Modifiers\",\n    addresses: \"Addresses\",\n};\n","import React from \"react\";\nimport parse from \"html-react-parser\";\nimport { metrics } from \"../fixtures/metrics\";\n\nexport const ContractItem = (props) => {\n    const getURL = (addr) => `https://etherscan.io/address/${addr}#code`;\n\n    const getTD = (k, i) => {\n        let v = props.data[k];\n        if (v.length > 15) {\n            let text = `${v.slice(0, 15)}...`;\n            v = parse(`<a href=\"${getURL(v)}\" target=\"_\">${text}</a>`);\n        }\n        return <td key={i}>{v}</td>;\n    };\n\n    const getTDs = () => Object.keys(metrics).map(getTD);\n\n    return (\n        <tr key={props.id}>\n            <td className=\"text-right\">\n                <input\n                    checked={props.cart.indexOf(props.id) > -1}\n                    type=\"checkbox\"\n                    onClick={(e) => props.onClick(e, props.id)}\n                ></input>\n            </td>\n            {getTDs()}\n        </tr>\n    );\n};\n","import React from \"react\";\nimport { metrics } from \"../fixtures/metrics\";\n\nexport const ContractHeader = () => {\n    const getMetrics = () => Object.values(metrics);\n\n    const getTh = (v, i) => <th key={i}>{v}</th>;\n\n    const getHeader = () => getMetrics().map(getTh);\n\n    return (\n        <tr>\n            <td></td>\n            {getHeader()}\n        </tr>\n    );\n};\n","import React from \"react\";\nimport { ContractItem } from \"./contract-item\";\nimport { ContractHeader } from \"./contract-header\";\n\nexport const ContractList = (props) => {\n    const renderRow = (v, i) => (\n        <ContractItem\n            id={v.contractAddress}\n            key={i}\n            data={v}\n            onClick={props.onClick}\n            cart={props.cart}\n        />\n    );\n    const getRowsData = () => props.data.map(renderRow);\n\n    return (\n        props.data.length > 0 && (\n            <table className=\"table table-hover table-sm table-bordered\">\n                <thead>\n                    <ContractHeader />\n                </thead>\n                <tbody>{getRowsData()}</tbody>\n            </table>\n        )\n    );\n};\n","const downloadFile = (addr) =>\n    fetch(getSourceCodeUrl(addr))\n        .then((resp) => resp.json())\n        .then(handleClick.bind({ address: addr }));\n\nconst getSourceCodeUrl = (address) =>\n    `https://api.etherscan.io/api?module=contract&action=getsourcecode&address=${address}&apikey=E5KM3HIGE2PV4RR763IQSXGZIV6UV638P2`;\n\nconst handleClick = function (json) {\n    const sourceCode = json.result[0].SourceCode;\n    const blob = new Blob([sourceCode], { type: \"application/json\" });\n    const a = document.createElement(\"a\");\n    a.href = window.URL.createObjectURL(blob);\n    a.download = `${this.address}.sol`;\n    document.body.appendChild(a);\n    a.click();\n    a.remove();\n};\n\nexport const handleContractsDownload = (addresses) =>\n    addresses.forEach(downloadFile);\n","import React from \"react\";\nimport { handleContractsDownload } from \"../services/handle-download\";\n\nexport const Cart = (props) => {\n    const cart = props.cart;\n    const hide = cart.length ? \"\" : \"d-none\";\n    const no_hide = cart.length ? \"d-none\" : \"\";\n    return (\n        props.total > 0 && (\n            <div className=\"mt-3 mb-1\">\n                <button type=\"button\" className={`btn btn-info ${no_hide}`}>\n                    Select the checkboxes to download the smart contracts -\n                    Total number of contracts:{\" \"}\n                    <span className=\"badge badge-light\">{props.total}</span>\n                </button>\n                <button\n                    onClick={() => handleContractsDownload(cart)}\n                    type=\"button\"\n                    className={`btn btn-info ${hide}`}\n                >\n                    Download{\" \"}\n                    <span className=\"badge badge-light\">{cart.length}</span>{\" \"}\n                    smart contracts\n                </button>\n            </div>\n        )\n    );\n};\n","import \"./App.css\";\nimport React, { Component } from \"react\";\nimport { Helmet, HelmetProvider } from \"react-helmet-async\";\nimport { ContractFinder } from \"./components/contract-finder\";\nimport { ContractList } from \"./components/contract-list\";\nimport { handleContracts, addToCart } from \"./services/handle-contracts\";\nimport { Cart } from \"./components/cart\";\n\nexport default class App extends Component {\n    constructor(props) {\n        super(props);\n        this.handleContract = handleContracts.bind(this);\n        this.handleCart = addToCart.bind(this);\n        this.state = { loading: false, data: [], total: 0, cart: [] };\n    }\n    render = () => (\n        <React.Fragment>\n            <HelmetProvider>\n                <Helmet>\n                    <title>Smac-Corpus</title>\n                </Helmet>\n            </HelmetProvider>\n            <ContractFinder\n                onSubmit={this.handleContract}\n                loading={this.state.loading}\n            />\n            <Cart total={this.state.total} cart={this.state.cart} />\n            <ContractList\n                data={this.state.data}\n                onClick={this.handleCart}\n                cart={this.state.cart}\n            />\n        </React.Fragment>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}