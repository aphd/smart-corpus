{"version":3,"sources":["components/cue-form-validation.jsx","services/handleSubmit.jsx","components/cue-form.jsx","components/smac-list.jsx","App.jsx","serviceWorker.js","index.js"],"names":["cueFormValidation","Yup","shape","CV","required","Type","formOptions","contract_types","pragma_versions","greater_than","Any","$gt","handleSubmit","query","this","Object","assign","keys","forEach","v","fetch","JSON","stringify","then","res","json","data","setState","smacs","catch","err","console","log","CueForm","initialValues","onSubmit","setSubmitting","props","validationSchema","values","errors","isSubmitting","name","as","TextField","select","label","SelectProps","native","entries","map","key","k","Button","variant","color","type","disabled","Component","SmacList","format_date","date","substr","replace","className","smac","id","_id","target","href","address","ContractName","SLOC","NF","FS","LS","App","render","state","bind","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f6d58757.chunk.js","sourcesContent":["import * as Yup from \"yup\";\n\nconst cueFormValidation = Yup.object().shape({\n    CV: Yup.string().required(\"Must enter a value\"),\n    Type: Yup.string().required(\"Must enter a value\")\n});\n\nexport default cueFormValidation;\n","export const formOptions = {\n    contract_types: [\"Any\", \"contract\", \"interface\", \"library\"],\n    pragma_versions: [\"Any\", \"0.4.25\", \"0.5.0\", \"0.5.4\"],\n    greater_than: {\n        Any: \"Any\",\n        \"Greater than 1\": { $gt: 1 },\n        \"Greater than 10\": { $gt: 10 },\n        \"Greater than 100\": { $gt: 100 },\n        \"Greater than 1000\": { $gt: 1000 }\n    }\n};\n\nexport const handleSubmit = function(query) {\n    // TODO to improve code readability/reusability\n    this.query = Object.assign({}, query);\n    Object.keys(query).forEach(v => {\n        if (this.query[v] === \"Any\") delete this.query[v];\n    });\n    this.query[\"SLOC\"] = formOptions.greater_than[this.query[\"SLOC\"]];\n    this.query[\"NF\"] = formOptions.greater_than[this.query[\"NF\"]];\n    fetch(\"https://smac.ga/object/\" + JSON.stringify(this.query))\n        .then(res => res.json())\n        .then(data => this.setState({ smacs: data }))\n        .catch(err => console.log(\"catch:\\n\", err));\n};\n","import React, { Component } from \"react\";\nimport { Formik, Field, Form } from \"formik\";\nimport { TextField, Button } from \"@material-ui/core\";\nimport cueFormValidation from \"./cue-form-validation\";\nimport { formOptions } from \"../services/handleSubmit\";\n\nexport class CueForm extends Component {\n    render() {\n        console.log();\n        return (\n            <Formik\n                initialValues={{ Type: \"Any\", CV: \"Any\" }}\n                onSubmit={(data, { setSubmitting }) => {\n                    setSubmitting(true);\n                    this.props.onSubmit(data);\n                    setSubmitting(false);\n                }}\n                validationSchema={cueFormValidation}\n            >\n                {({ values, errors, isSubmitting }) => (\n                    <Form>\n                        <Field\n                            name=\"Type\"\n                            as={TextField}\n                            select\n                            label=\"Contract type\"\n                            SelectProps={{\n                                native: true\n                            }}\n                        >\n                            {Object.entries(formOptions.contract_types).map(\n                                v => (\n                                    <option key={v[1]}>{v[1]}</option>\n                                )\n                            )}\n                        </Field>\n                        <Field\n                            name=\"CV\"\n                            as={TextField}\n                            select\n                            label=\"pragma version\"\n                            SelectProps={{\n                                native: true\n                            }}\n                        >\n                            {Object.entries(formOptions.pragma_versions).map(\n                                v => (\n                                    <option key={v[1]}>{v[1]}</option>\n                                )\n                            )}\n                        </Field>\n                        <Field\n                            name=\"SLOC\"\n                            as={TextField}\n                            select\n                            label=\"Source lines of code\"\n                            SelectProps={{\n                                native: true\n                            }}\n                        >\n                            {Object.entries(formOptions.greater_than).map(\n                                (k, v) => (\n                                    <option key={v}>{k[0]}</option>\n                                )\n                            )}\n                        </Field>\n                        <Field\n                            name=\"NF\"\n                            as={TextField}\n                            select\n                            label=\"Number of functions\"\n                            SelectProps={{\n                                native: true\n                            }}\n                        >\n                            {Object.entries(formOptions.greater_than).map(\n                                (k, v) => (\n                                    <option key={v}>{k[0]}</option>\n                                )\n                            )}\n                        </Field>\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            type=\"submit\"\n                            disabled={isSubmitting}\n                        >\n                            submit\n                        </Button>\n                        {/* <pre>Errors: {JSON.stringify(errors, null, 2)}</pre>\n                        <pre>Values: {JSON.stringify(values, null, 2)}</pre> */}\n                    </Form>\n                )}\n            </Formik>\n        );\n    }\n}\n","import React, { Component } from \"react\";\n\nexport class SmacList extends Component {\n    constructor(props) {\n        super();\n    }\n\n    render() {\n        const format_date = date => date.substr(0, 16).replace(\"T\", \" \");\n        return (\n            this.props.smacs && (\n                <div>\n                    <table className=\"table table-hover table-sm table-bordered mt-5\">\n                        <thead>\n                            <tr>\n                                <th>#</th>\n                                <th>Address</th>\n                                <th>pragma</th>\n                                <th>Name</th>\n                                <th>Type</th>\n                                <th>SLOC</th>\n                                <th>NF</th>\n                                <th>First_seen</th>\n                                <th>Last_seen</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {this.props.smacs.map((smac, id) => {\n                                return (\n                                    <tr key={smac._id}>\n                                        <td>{id + 1}</td>\n                                        <td>\n                                            <a\n                                                target=\"_\"\n                                                href={`https://etherscan.io/address/${smac.address}#code`}\n                                            >\n                                                {smac.address}\n                                            </a>\n                                        </td>\n                                        <td>{smac.CV}</td>\n                                        <td>{smac.ContractName}</td>\n                                        <td>{smac.Type}</td>\n                                        <td>{smac.SLOC}</td>\n                                        <td>{smac.NF}</td>\n                                        <td>{format_date(smac.FS)}</td>\n                                        <td>{format_date(smac.LS)}</td>\n                                    </tr>\n                                );\n                            })}\n                        </tbody>\n                    </table>\n                </div>\n            )\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { Helmet, HelmetProvider } from \"react-helmet-async\";\nimport \"./App.css\";\nimport { CueForm } from \"./components/cue-form\";\nimport { SmacList } from \"./components/smac-list\";\nimport { handleSubmit } from \"./services/handleSubmit\";\n\nclass App extends Component {\n    constructor(props) {\n        super();\n        this.handleSubmit = handleSubmit.bind(this);\n    }\n\n    render = () => {\n        return (\n            <main>\n                <HelmetProvider>\n                    <Helmet>\n                        <title>Smac-Corpus</title>\n                    </Helmet>\n                </HelmetProvider>\n                <CueForm onSubmit={this.handleSubmit} />\n                <SmacList smacs={this.state && this.state.smacs} />\n            </main>\n        );\n    };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}