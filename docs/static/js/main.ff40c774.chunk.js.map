{"version":3,"sources":["components/cue-form-validation.jsx","components/cue-form.jsx","components/smac-list.jsx","App.jsx","serviceWorker.js","index.js"],"names":["cueFormValidation","Yup","shape","licence","min","required","CueForm","initialValues","balance","hasLicense","onSubmit","data","setSubmitting","console","log","validationSchema","values","errors","isSubmitting","name","type","as","TextField","Checkbox","Button","disabled","JSON","stringify","Component","SmacList","props","state","smacs","fetch","headers","then","res","json","setState","catch","err","format_date","date","substr","replace","className","this","map","smac","key","_id","target","href","address","ContractName","Type","SLOC","NF","FS","LS","App","render","onFormSubmit","handleFormSubmit","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oWAQeA,EANWC,MAAaC,MAAM,CACzCC,QAASF,MACJG,IAAI,EAAG,+BACPC,SAAS,wBCmCHC,E,iLAjCP,OACI,kBAAC,IAAD,CACIC,cAAe,CAAEJ,QAAS,GAAIK,QAAS,GAAIC,YAAY,GACvDC,SAAU,SAACC,EAAD,GAA8B,IAArBC,EAAoB,EAApBA,cACfA,GAAc,GACdC,QAAQC,IAAI,WAAYH,GACxBC,GAAc,IAElBG,iBAAkBf,IAEjB,gBAAGgB,EAAH,EAAGA,OAAQC,EAAX,EAAWA,OAAQC,EAAnB,EAAmBA,aAAnB,OACG,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,UAAUC,KAAK,QAAQC,GAAIC,MACvC,kBAAC,IAAD,CAAOH,KAAK,UAAUC,KAAK,QAAQC,GAAIC,MACvC,kBAAC,IAAD,CACIH,KAAK,aACLC,KAAK,WACLC,GAAIE,MAER,6BACI,kBAACC,EAAA,EAAD,CAAQJ,KAAK,SAASK,SAAUP,GAAhC,WAIJ,wCAAcQ,KAAKC,UAAUV,EAAQ,KAAM,IAC3C,wCAAcS,KAAKC,UAAUX,EAAQ,KAAM,Y,GA3B7CY,aC6DPC,E,YA/DX,WAAYC,GAAQ,IAAD,8BACf,+CACKC,MAAQ,CAAEC,MAAO,IAFP,E,iFAKE,IAAD,OAChBC,MAAM,sBAAuB,CACzBC,QAAS,CAAE,eAAgB,sBAE1BC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAxB,GACF,EAAK2B,SAAS,CAAEN,MAAOrB,OAE1B4B,OAAM,SAAAC,GACH3B,QAAQC,IAAI,WAAY0B,Q,+BAKhC,IAAMC,EAAc,SAAAC,GAAI,OAAIA,EAAKC,OAAO,EAAG,IAAIC,QAAQ,IAAK,MAC5D,OACI,6BACI,2BAAOC,UAAU,6CAEb,+BACI,4BACI,uCACA,oCACA,oCACA,oCACA,kCACA,0CACA,2CAGR,+BACKC,KAAKf,MAAMC,MAAMe,KAAI,SAAAC,GAClB,OACI,wBAAIC,IAAKD,EAAKE,KACV,4BACI,uBACIC,OAAO,IACPC,KAAI,uCAAkCJ,EAAKK,QAAvC,UAEHL,EAAKK,UAGd,4BAAKL,EAAKM,cACV,4BAAKN,EAAKO,MACV,4BAAKP,EAAKQ,MACV,4BAAKR,EAAKS,IACV,4BAAKhB,EAAYO,EAAKU,KACtB,4BAAKjB,EAAYO,EAAKW,gB,GArDnC/B,aCoBRgC,E,2MAfXC,OAAS,WACL,OACI,0BAAMhB,UAAU,mBACZ,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,gDAGR,kBAAC,EAAD,CAASiB,aAAc,EAAKC,mBAC5B,kBAAC,EAAD,Q,6BAVEnC,aCMEoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASR,OAAO,kBAAC,EAAD,MAASS,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,MAAK,SAAAwC,GACjCA,EAAaC,kB","file":"static/js/main.ff40c774.chunk.js","sourcesContent":["import * as Yup from \"yup\";\n\nconst cueFormValidation = Yup.object().shape({\n    licence: Yup.string()\n        .min(3, \"Must have at least 3 values\")\n        .required(\"Must enter a value\")\n});\n\nexport default cueFormValidation;\n","import React, { Component } from \"react\";\nimport { Formik, Field, Form } from \"formik\";\nimport { TextField, Button, Checkbox } from \"@material-ui/core\";\nimport cueFormValidation from \"./cue-form-validation\";\n\nclass CueForm extends Component {\n    render() {\n        return (\n            <Formik\n                initialValues={{ licence: \"\", balance: \"\", hasLicense: false }}\n                onSubmit={(data, { setSubmitting }) => {\n                    setSubmitting(true);\n                    console.log(\"Submit: \", data);\n                    setSubmitting(false);\n                }}\n                validationSchema={cueFormValidation}\n            >\n                {({ values, errors, isSubmitting }) => (\n                    <Form>\n                        <Field name=\"licence\" type=\"input\" as={TextField} />\n                        <Field name=\"balance\" type=\"input\" as={TextField} />\n                        <Field\n                            name=\"hasLicense\"\n                            type=\"checkbox\"\n                            as={Checkbox}\n                        />\n                        <div>\n                            <Button type=\"submit\" disabled={isSubmitting}>\n                                submit\n                            </Button>\n                        </div>\n                        <pre>Errors: {JSON.stringify(errors, null, 2)}</pre>\n                        <pre>Values: {JSON.stringify(values, null, 2)}</pre>\n                    </Form>\n                )}\n            </Formik>\n        );\n    }\n}\n\nexport default CueForm;\n","import React, { Component } from \"react\";\n\nclass SmacList extends Component {\n    constructor(props) {\n        super();\n        this.state = { smacs: [] };\n    }\n\n    componentDidMount() {\n        fetch(\"https://smac.ga/adr\", {\n            headers: { \"content-type\": \"application/json\" }\n        })\n            .then(res => res.json())\n            .then(data => {\n                this.setState({ smacs: data });\n            })\n            .catch(err => {\n                console.log(\"catch:\\n\", err);\n            });\n    }\n\n    render() {\n        const format_date = date => date.substr(0, 16).replace(\"T\", \" \");\n        return (\n            <div>\n                <table className=\"table table-hover table-sm table-bordered\">\n                    {/* TODO based on the json it should be automatic */}\n                    <thead>\n                        <tr>\n                            <th>Address</th>\n                            <th>Name</th>\n                            <th>Type</th>\n                            <th>SLOC</th>\n                            <th>NF</th>\n                            <th>First_seen</th>\n                            <th>Last_seen</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.state.smacs.map(smac => {\n                            return (\n                                <tr key={smac._id}>\n                                    <td>\n                                        <a\n                                            target=\"_\"\n                                            href={`https://etherscan.io/address/${smac.address}#code`}\n                                        >\n                                            {smac.address}\n                                        </a>\n                                    </td>\n                                    <td>{smac.ContractName}</td>\n                                    <td>{smac.Type}</td>\n                                    <td>{smac.SLOC}</td>\n                                    <td>{smac.NF}</td>\n                                    <td>{format_date(smac.FS)}</td>\n                                    <td>{format_date(smac.LS)}</td>\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\nexport default SmacList;\n","import React, { Component } from \"react\";\nimport { Helmet, HelmetProvider } from \"react-helmet-async\";\nimport \"./App.css\";\nimport CueForm from \"./components/cue-form\";\nimport SmacList from \"./components/smac-list\";\n\nclass App extends Component {\n    render = () => {\n        return (\n            <main className=\"container-fluid\">\n                <HelmetProvider>\n                    <Helmet>\n                        <title>Smac-Corpus</title>\n                    </Helmet>\n                </HelmetProvider>\n                <CueForm onFormSubmit={this.handleFormSubmit} />\n                <SmacList />\n            </main>\n        );\n    };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}